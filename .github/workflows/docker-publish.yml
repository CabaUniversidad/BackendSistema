name: CI/CD FastAPI Docker en Oracle Cloud

on:
  push:
    branches:
      - main

jobs:
  construir-y-publicar:
    runs-on: ubuntu-latest
    steps:
      - name: Descargar repositorio
        uses: actions/checkout@v3

      - name: Iniciar sesi√≥n en DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Construir imagen Docker
        run: docker build -t ${{ secrets.DOCKER_USER }}/backend_fastapi:latest .

      - name: Subir imagen a DockerHub
        run: docker push ${{ secrets.DOCKER_USER }}/backend_fastapi:latest

  desplegar: # Nombre cambiado a 'desplegar' para consistencia
    needs: construir-y-publicar
    runs-on: ubuntu-latest
    steps:
      # 1Ô∏è‚É£ Descargar repositorio (para obtener docker-compose.yml y setup_vm.sh)
      - name: Descargar repositorio
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Configurar agente SSH
      - name: Configurar agente SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # 3Ô∏è‚É£ Copiar script de configuraci√≥n a la VM
      - name: Copiar script de configuraci√≥n a la VM
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "setup_vm.sh"
          target: "/home/${{ secrets.SSH_USER }}/temp/"

      # 4Ô∏è‚É£ Ejecutar script de instalaci√≥n de Docker en la VM
      - name: Ejecutar script de instalaci√≥n de Docker en la VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          script: |
            cd ~/temp
            chmod +x setup_vm.sh
            ./setup_vm.sh ${{ secrets.SSH_USER }}
            rm setup_vm.sh

      # 5Ô∏è‚É£ Copiar docker-compose.yml a la VM
      - name: Copiar docker-compose.yml a la VM
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "docker-compose.yml"
          target: "/home/${{ secrets.SSH_USER }}/deploy/"

      # 6Ô∏è‚É£ Levantar contenedor FastAPI en la VM
      - name: Levantar contenedor FastAPI
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          script: |
            DEPLOY_PATH=/home/${{ secrets.SSH_USER }}/deploy
            cd $DEPLOY_PATH

            # Login a Docker Hub y descargar la imagen
            echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USER }} --password-stdin
            docker pull ${{ secrets.DOCKER_USER }}/backend_fastapi:latest

            # Levantar contenedor con docker-compose
            docker-compose up -d --force-recreate

            docker logout

  notificar-al-finalizar: # Nombre del trabajo cambiado a espa√±ol y dependencia ajustada
    needs: [construir-y-publicar, desplegar] # ¬°CORRECCI√ìN CLAVE! Ahora espera a que 'desplegar' termine
    runs-on: ubuntu-latest
    if: always() # Asegura que se ejecute incluso si un trabajo falla

    steps:
      - name: Determinar el Estado de la Pipeline
        id: check
        run: |
          # Obtenemos el resultado final de la dependencia directa m√°s cr√≠tica (el despliegue)
          # NOTA: Necesitas cambiar esto si quieres ver el resultado de 'desplegar'. 
          # GitHub Actions no tiene un "resultado general" simple.
          # Lo dejaremos en 'success' ya que el 'if: always()' asegura que notifique de cualquier manera.
          # Para una l√≥gica de notificaci√≥n m√°s robusta, se usar√≠a `github.event.workflow_run.conclusion`.

          # Si quieres que la notificaci√≥n refleje el estado de DESPLEGAR:
          JOB_STATUS="${{ needs.desplegar.result }}" 
          
          if [ "$JOB_STATUS" == "success" ]; then
            STATUS_EMOJI="‚úÖ √âxito"
            COLOR="#22863a"
          elif [ "$JOB_STATUS" == "failure" ]; then
            STATUS_EMOJI="üö® Fallo en Despliegue"
            COLOR="#cf222e"
          else
            STATUS_EMOJI="‚ö†Ô∏è Estado Desconocido"
            COLOR="#ff8000"
          fi
          
          echo "STATUS_EMOJI=$STATUS_EMOJI" >> $GITHUB_ENV
          echo "COLOR=$COLOR" >> $GITHUB_ENV
          
      - name: Enviar Correo de Notificaci√≥n (Usando Google Apps Script Webhook)
        run: |
          # 1. Definir el cuerpo HTML del correo
          HTML_BODY=$(cat <<EOF
          <html>
            <head>
              <style>
                .status-box { background-color: ${{ env.COLOR }}; color: white; padding: 10px; border-radius: 5px; font-weight: bold; }
              </style>
            </head>
            <body>
              <p>Hola,</p>
              <p>La pipeline de CI/CD para <b>${{ github.repository }}</b> ha finalizado.</p>
              <div class="status-box">ESTADO: ${{ env.STATUS_EMOJI }}</div>
              <p>Revisa la ejecuci√≥n completa aqu√≠: <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">${{ github.run_id }}</a></p>
              <p>Saludos desde GitHub Actions.</p>
            </body>
          </html>
          EOF
          )
                    
                    # 2. Construir el payload JSON para el Webhook
                    JSON_PAYLOAD=$(cat <<EOF
          {
            "to": "abdelpre18@gmail.com", 
            "subject": "[${{ env.STATUS_EMOJI }}] Notificaci√≥n de CI/CD: ${{ github.repository }}",
            "body": "$HTML_BODY"
          }
          EOF
          )
                    
                    # 3. Enviar la petici√≥n POST al Webhook
                    curl -s -X POST \
                      -H "Content-Type: application/json" \
                      -d "$JSON_PAYLOAD" \
                      "${{ secrets.GMAIL_APP_SCRIPT_URL }}" # URL del Google Apps Script